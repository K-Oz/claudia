name: Release Build

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published, created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-binaries:
    name: Build Binary (${{ matrix.platform.name }})
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux x86_64
            os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            binary-suffix: ''
            archive-name: claudia-linux-x86_64
          - name: Windows x86_64
            os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            binary-suffix: '.exe'
            archive-name: claudia-windows-x86_64
          - name: macOS x86_64
            os: macos-latest
            rust-target: x86_64-apple-darwin
            binary-suffix: ''
            archive-name: claudia-macos-x86_64
          - name: macOS ARM64
            os: macos-latest
            rust-target: aarch64-apple-darwin
            binary-suffix: ''
            archive-name: claudia-macos-arm64
    
    runs-on: ${{ matrix.platform.os }}
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install system dependencies for Linux
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev

      # Setup Rust with caching
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust-target }}

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          
      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Cache Bun dependencies
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun
            node_modules
          key: ${{ matrix.platform.os }}-bun-${{ hashFiles('bun.lockb', 'package.json') }}
          restore-keys: |
            ${{ matrix.platform.os }}-bun-
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: bun install --frozen-lockfile

      # Build frontend
      - name: Build frontend
        run: bun run build

      # Build Tauri application for release
      - name: Build Tauri application (release)
        run: bun run tauri build --no-bundle --target ${{ matrix.platform.rust-target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""

      # Create release directory and copy binary
      - name: Prepare release artifacts
        shell: bash
        run: |
          mkdir -p release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            cp "src-tauri/target/${{ matrix.platform.rust-target }}/release/claudia.exe" "release/claudia.exe"
          else
            cp "src-tauri/target/${{ matrix.platform.rust-target }}/release/claudia" "release/claudia"
          fi
          # Copy additional files
          cp README.md release/
          cp LICENSE release/
          # Create version info
          echo "Claudia ${{ github.ref_name || inputs.tag }}" > release/VERSION
          echo "Built on: $(date)" >> release/VERSION
          echo "Platform: ${{ matrix.platform.name }}" >> release/VERSION
          echo "Target: ${{ matrix.platform.rust-target }}" >> release/VERSION

      # Create archive
      - name: Create archive
        shell: bash
        run: |
          cd release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a "../${{ matrix.platform.archive-name }}.zip" *
          else
            tar -czf "../${{ matrix.platform.archive-name }}.tar.gz" *
          fi

      # Upload binary as artifact
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.archive-name }}
          path: |
            ${{ matrix.platform.archive-name }}.tar.gz
            ${{ matrix.platform.archive-name }}.zip
          retention-days: 30

  # Build bundled packages (installers)
  build-bundles:
    name: Build Bundle (${{ matrix.platform.name }})
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux
            os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            bundles: "deb,appimage"
          - name: Windows
            os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            bundles: "msi,nsis"
          - name: macOS
            os: macos-latest
            rust-target: x86_64-apple-darwin
            bundles: "dmg"
    
    runs-on: ${{ matrix.platform.os }}
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install system dependencies for Linux
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev

      # Setup Rust with caching
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust-target }}

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          
      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Cache Bun dependencies
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun
            node_modules
          key: ${{ matrix.platform.os }}-bun-${{ hashFiles('bun.lockb', 'package.json') }}
          restore-keys: |
            ${{ matrix.platform.os }}-bun-
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: bun install --frozen-lockfile

      # Build frontend
      - name: Build frontend
        run: bun run build

      # Build Tauri application with bundles
      - name: Build Tauri application (with bundles)
        run: bun run tauri build --bundles ${{ matrix.platform.bundles }} --target ${{ matrix.platform.rust-target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ""
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""

      # Upload bundle artifacts
      - name: Upload bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bundles-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/**/*
          retention-days: 30

  # Create GitHub release if this is a tag push
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-bundles]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Create release
      - name: Create or update release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name || inputs.tag }}
          name: Release ${{ github.ref_name || inputs.tag }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') || contains(inputs.tag, '-') }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.deb
            artifacts/**/*.dmg
            artifacts/**/*.msi
            artifacts/**/*.exe
            artifacts/**/*.AppImage
          body: |
            ## Release ${{ github.ref_name || inputs.tag }}
            
            ### Downloads
            
            #### Standalone Binaries
            - **Linux x86_64**: `claudia-linux-x86_64.tar.gz`
            - **Windows x86_64**: `claudia-windows-x86_64.zip`
            - **macOS x86_64**: `claudia-macos-x86_64.tar.gz`
            - **macOS ARM64**: `claudia-macos-arm64.tar.gz`
            
            #### Installers
            - **Linux**: `.deb` package and `.AppImage`
            - **Windows**: `.msi` installer
            - **macOS**: `.dmg` disk image
            
            ### Installation
            
            **Standalone binaries**: Extract and run the `claudia` executable.
            
            **Linux**:
            ```bash
            # For .deb package
            sudo dpkg -i claudia_*.deb
            
            # For AppImage
            chmod +x claudia_*.AppImage
            ./claudia_*.AppImage
            ```
            
            **Windows**: Run the `.msi` installer or extract the `.zip` file.
            
            **macOS**: Open the `.dmg` file and drag Claudia to Applications.
            
            ### What's Changed
            
            * Full changelog: [${{ github.event.before }}...${{ github.sha }}](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [build-binaries, build-bundles]
    if: always()
    
    steps:
      - name: Check build results
        run: |
          if [[ "${{ needs.build-binaries.result }}" == "failure" ]] || [[ "${{ needs.build-bundles.result }}" == "failure" ]]; then
            echo "❌ One or more release builds failed"
            exit 1
          elif [[ "${{ needs.build-binaries.result }}" == "cancelled" ]] || [[ "${{ needs.build-bundles.result }}" == "cancelled" ]]; then
            echo "⚠️ Release builds were cancelled"
            exit 1
          else
            echo "✅ All release builds completed successfully"
            echo "🎉 Binaries and bundles are ready for release!"
          fi